public class TestCode {
    // CSVファイルを指定してDBに一括追加（マッピング対応）
    public void ImportCsvToDb(string csvFilePath, string tableName = "MainTable") {
        var vdiDb = new VdiDb(tableName);
        CsvMapping mapping = CsvMapping.LoadOrCreate();
        List<string> fieldOrder = null;
        // マッピングダイアログ表示（必要な場合のみ）
        var firstLine = System.IO.File.ReadLines(csvFilePath).FirstOrDefault();
        if (firstLine == null) return;
        var columns = firstLine.Split(',');
        var dbFields = typeof(MainDataType).GetProperties().Select(p => p.Name).ToList();
        bool needMapping = mapping.FieldOrder == null || mapping.FieldOrder.Count != columns.Length;
        if (needMapping) {
            var dialog = new CsvMappingDialog(
                columns.Select((c, i) => $"列{i + 1}").ToList(), dbFields);
            if (dialog.ShowDialog() == true) {
                fieldOrder = dialog.GetFieldOrder();
                mapping.FieldOrder = fieldOrder;
                mapping.Save();
            }
            else {
                return; // キャンセル
            }
        }
        else {
            fieldOrder = mapping.FieldOrder;
        }
        var items = CsvImporter.ReadCsvWithMapping(csvFilePath, fieldOrder);
        foreach (var item in items) {
            vdiDb.InsertVDI(item);
        }
        LoadDataFromSQLite(tableName); // 画面リロード
    }

    // ファイルダイアログも含めてインポートをViewModelで完結
    public void ImportCsvWithDialog(string tableName = "MainTable") {
        var dialog = new Microsoft.Win32.OpenFileDialog {
            Filter = "CSVファイル (*.csv)|*.csv|すべてのファイル (*.*)|*.*",
            Title = "CSVファイルを選択"
        };
        if (dialog.ShowDialog() == true) {
            var result = System.Windows.MessageBox.Show(
                "既存のvdi.dbにCSVデータを追加しますか？\n（OKで追加、キャンセルで中止）\n\n※列のマッピングをやり直したい場合はcsv_mapping.jsonを削除してください。",
                "DBへ追加確認",
                System.Windows.MessageBoxButton.OKCancel,
                System.Windows.MessageBoxImage.Question
            );
            if (result == System.Windows.MessageBoxResult.OK) {
                ImportCsvToDb(dialog.FileName, tableName);
                System.Windows.MessageBox.Show("CSVからDBへのインポートが完了しました。", "インポート完了");
            }
        }
    }
    public void LoadColumnFromJson() {
        try {
            var path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SRC", "Resource", "columns.json");
            if (File.Exists(path)) {
                var json = File.ReadAllText(path);
                var columns = JsonSerializer.Deserialize<List<ColumnConfig>>(json);
                MainDataGrid.Columns.Clear();
                foreach (var col in columns) {
                    MainDataGrid.Columns.Add(new DataGridTextColumn {
                        Header = col.Header,
                        Binding = new System.Windows.Data.Binding(col.Binding),
                        Width = col.Width
                    });
                }
            }
            else {
                MessageBox.Show($"{path} が見つかりません。");
            }
        }
        catch { /* 読み込み失敗時は何もしない */ }
    }

    //データ型
    public class ColumnConfig {
        public string Header { get; set; }
        public string Binding { get; set; }
        public int Width { get; set; }
    }

    private void ClearColumn() {
        if (DataContext is MainViewModel vm) {
            vm.ClearColumn?.Invoke("ColumnName", 0); // 引数は適宜変更
        }
    }
}